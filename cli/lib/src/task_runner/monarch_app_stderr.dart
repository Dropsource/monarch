import 'dart:io';

import 'package:monarch_utils/log.dart';

import 'task_names.dart';

/// This funcion handles scenarios where the platform Window Manager,
/// the Controller or the Preview write to stderr:
/// - It logs messages on stderr as severe
/// - It parses multi-line stderr messages so they are logged adequately
/// - It also mutes (or ignores) specific messages written to stderr which
///   we don't want to surface as errors to the user.
///
/// Keep in mind that not all errors are written to stderr. For example,
/// compile errors and render overflow errors are written to stdout. Errors
/// in stdout are handled using markers, i.e. `##err-line##` marker.
///
/// Messages written to stderr have usually come from plugins, like the
/// Google Font plugin which used to fail like this:
/// ```
/// Unhandled Exception: MissingPluginException(No implementation found for method getApplicationSupportDirectory on channel plugins.flutter.io/path_provider)
/// ...
/// (stack trace)
/// ...
/// ```
///
/// ### CFBundle message on macOS
/// Around 2021-03-15, the mac app started writing a message like the following
/// to stderr:
/// ```
/// 2021-05-13 19:14:16.165 monarch[70530:10028639] Cannot find executable for CFBundle 0x7fc54466d140 </path/to/project/.monarch> (not loaded)
/// ```
/// This issue was also reported here: https://github.com/Dropsource/monarch/issues/15
///
/// This "CFBundle" error message doesn't manifest any unexpected behavior. It is
/// also pretty hard to fix. The error seems to be common and the fixes
/// are not straight forward. We are just ignoring for now.
///
/// ### Preview Api messages on Windows
/// When we introduced the preview api on Windows, around 2022-10-15, the preview api app started
/// writing these messages to stderr:
///
/// ```
/// 2022-10-17 13:37:52.634678 SEVERE [run-preview-app] [ERROR:flutter/shell/platform/embedder/embedder_surface_gl.cc(103)] Could not create a resource context for async texture uploads. Expect degraded performance. Set a valid make_resource_current callback on FlutterOpenGLRendererConfig.
/// 2022-10-17 13:37:52.635217 SEVERE [run-preview-app] [ERROR:flutter/shell/gpu/gpu_surface_gl_skia.cc(43)] Could not make the context current to set up the Gr context.
/// ...
/// 2022-10-17 13:37:52.636348 SEVERE [run-preview-app] [ERROR:flutter/shell/gpu/gpu_surface_gl_skia.cc(81)] Could not make the context current to set up the Gr context.
/// Stack trace:
/// [ERROR:flutter/shell/common/platform_view.cc(76)] Failed to create platform view rendering surface
/// ```
///
/// These errors are generated by creating the headless flutter engine for the
/// preview api. If we don't want the errors to show, we need to submit an issue to the flutter team.
/// The errors do not cause any side effects since the preview api doesn't have UI,
/// therefore it doesn't need a rendering surface.
void onRunMonarchAppStdErrMessage(String message, Logger _logger) {
  if (Platform.isWindows && _logger.name == TaskNames.runPreviewApp) {
    if (message.contains(
            'Could not create a resource context for async texture uploads. Expect degraded performance. Set a valid make_resource_current callback on FlutterOpenGLRendererConfig.') ||
        message.contains(
            'Could not make the context current to set up the Gr context.') ||
        message.contains('Failed to create platform view rendering surface')) {
      _logger.info('**ignored-severe** $message');
      return;
    }
  }

  // if the message is multi-line
  final newLineIndex = message.indexOf('\n');
  if (newLineIndex > -1 && newLineIndex < message.length - 1) {
    final parsedMessage = message.substring(0, newLineIndex).trimLeft();
    final stackTrace = message.substring(newLineIndex).trimLeft();
    _logger.severe(parsedMessage, null, StackTrace.fromString(stackTrace));
    return;
  }

  // messages below are expected to be single line
  if (Platform.isMacOS) {
    var cannotFindBundle = RegExp(
        r'Cannot find executable for CFBundle .* <.*(\.monarch|monarch_controller)> \(not loaded\)');

    if (cannotFindBundle.hasMatch(message)) {
      _logger.info('**ignored-severe** $message');
      return;
    }
  }

  _logger.severe(message);
}
