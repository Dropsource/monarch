class FlutterChannels {
  static const stable = 'stable';
  static const beta = 'beta';
  static const dev = 'dev';
  static const master = 'master';
  static const unknown = 'unknown';
}

class FlutterSdkId extends Object {
  final String channel;
  final String version;
  final String operatingSystem;

  FlutterSdkId(
      {required this.channel,
      required this.version,
      required this.operatingSystem});

  @override
  String toString() {
    return 'flutter_${operatingSystem}_$version-$channel';
  }

  @override
  bool operator ==(Object other) {
    if (other is FlutterSdkId) {
      return channel == other.channel &&
          version == other.version &&
          operatingSystem == other.operatingSystem;
    } else {
      return false;
    }
  }

  @override
  int get hashCode => toString().hashCode;

  /// Parses a string id generated by the `FlutterSdkId.toString()` method.
  ///
  /// Sample expected string ids:
  /// ```
  /// flutter_macos_2.0.5-stable
  /// flutter_windows_2.2.0-10.1.pre-dev
  /// ```
  static FlutterSdkId parse(String stringId) {
    var pattern = RegExp(
        '^flutter_(macos|windows|linux)_(.+)-(stable|beta|dev|master|unknown)\$');
    if (pattern.hasMatch(stringId)) {
      var match = pattern.firstMatch(stringId)!;
      if (match.groupCount == 3) {
        var _os = match.group(1)!;
        var _version = match.group(2)!;
        var _channel = match.group(3)!;
        return FlutterSdkId(
            channel: _channel, version: _version, operatingSystem: _os);
      }
    }
    throw ArgumentError(
        'Could not parse version, channel or operating system from "$stringId"');
  }

  /// Parses the `flutter --version` output into a FlutterSdkId.
  ///
  /// Sample expected outputs:
  /// ```
  /// Flutter 2.0.6 • channel stable • https://github.com/flutter/flutter.git
  /// Framework • revision 1d9032c7e1 (2 days ago) • 2021-04-29 17:37:58 -0700
  /// Engine • revision 05e680e202
  /// Tools • Dart 2.12.3
  /// ```
  /// ```
  /// Flutter 2.2.0-10.2.pre • channel beta • https://github.com/flutter/flutter.git
  /// Framework • revision b5017bf8de (5 days ago) • 2021-04-28 17:09:53 -0700
  /// Engine • revision 91ed51e05c
  /// Tools • Dart 2.13.0 (build 2.13.0-211.13.beta)
  /// ```
  static FlutterSdkId parseFlutterVersionOutput(
      String flutterVersionOutput, String operatingSystem) {
    var pattern = RegExp(
        r'^Flutter\s(.+)\s•\schannel\s(stable|beta|dev|master|unknown)\s',
        multiLine: true);
    if (pattern.hasMatch(flutterVersionOutput)) {
      var match = pattern.firstMatch(flutterVersionOutput)!;
      if (match.groupCount == 2) {
        var _version = match.group(1)!;
        var _channel = match.group(2)!;
        return FlutterSdkId(
            channel: _channel,
            version: _version,
            operatingSystem: operatingSystem);
      }
    }
    throw ArgumentError(
        'Could not parse version and channel from "flutter --version" command output');
  }
}
